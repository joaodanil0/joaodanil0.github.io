{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Inicio MKDocs U-boot com QEMU Zephyr + ESP32 + Blinky Introdu\u00e7\u00e3o de Rust","title":"Inicio"},{"location":"#inicio","text":"MKDocs U-boot com QEMU Zephyr + ESP32 + Blinky Introdu\u00e7\u00e3o de Rust","title":"Inicio"},{"location":"Android/boot.img/","text":"Boot.img Image by dexmac from Pixabay Introdu\u00e7\u00e3o A algum tempo venho tentando desbravar o mundo do Android embarcado. Sem sombra de d\u00favidas \u00e9 uma \u00e1rea super interessante, mas os desafios s\u00e3o enormes. O sistema est\u00e1 crescendo desenfreadamente e os livros e fontes de estudo n\u00e3o est\u00e3o conseguindo acompanhar essa evolu\u00e7\u00e3o. Al\u00e9m disso, a documenta\u00e7\u00e3o na parte do sistema \u00e9 muito superficial, ao contr\u00e1rio da parte de desenvolvimento de aplica\u00e7\u00f5es ( documenta\u00e7\u00e3o ) que tamb\u00e9m possuem v\u00e1rios cursos pela Internet. Dispositivo usado [Em breve] Antes de Come\u00e7ar [Em breve] Instalando Depend\u00eancias Instalando o Repo []","title":"Boot.img"},{"location":"Android/boot.img/#bootimg","text":"Image by dexmac from Pixabay","title":"Boot.img"},{"location":"Android/boot.img/#introducao","text":"A algum tempo venho tentando desbravar o mundo do Android embarcado. Sem sombra de d\u00favidas \u00e9 uma \u00e1rea super interessante, mas os desafios s\u00e3o enormes. O sistema est\u00e1 crescendo desenfreadamente e os livros e fontes de estudo n\u00e3o est\u00e3o conseguindo acompanhar essa evolu\u00e7\u00e3o. Al\u00e9m disso, a documenta\u00e7\u00e3o na parte do sistema \u00e9 muito superficial, ao contr\u00e1rio da parte de desenvolvimento de aplica\u00e7\u00f5es ( documenta\u00e7\u00e3o ) que tamb\u00e9m possuem v\u00e1rios cursos pela Internet.","title":"Introdu\u00e7\u00e3o"},{"location":"Android/boot.img/#dispositivo-usado","text":"[Em breve]","title":"Dispositivo usado"},{"location":"Android/boot.img/#antes-de-comecar","text":"[Em breve] Instalando Depend\u00eancias Instalando o Repo []","title":"Antes de Come\u00e7ar"},{"location":"Bootloader/VIM3/u-boot/","text":"U-boot na VIM3 U-boot logo baseado no tutorial do p\u0155oprio u-boot em readthedocs Main line Baixar o u-boot mainline git clone https://github.com/u-boot/u-boot.git u-boot-mainline baixei o toolchain versao , para vers\u00f5es mais atuais checar em toolchain Precisa adicionar o path do arquivo descompactado ao $PATH do linux execute o seguinte comando dentro da pasta descompactada Buildando o u-boot 1 2 make khadas-vim3_defconfig O = out/ make CROSS_COMPILE = aarch64-none-elf- O = out/ O par\u00e2metro O define a pasta onde os arquivos gerados ser\u00e3o salvos. uboot modificado VIM3 Baixar git clone https://github.com/khadas/u-boot.git -b khadas-vims-v2015.01 u-boot-vim3 baixei a toolchain linaro ou no meu backup backup outra toolchain linaro ou meu backup backup Precisa adicionar o path dos arquivos descompactados ao $PATH do linux Buildando o u-boot VIM3 1 2 make kvim3_defconfig make CROSS_COMPILE = aarch64-none-elf- utilizar o paramametro O acaba gerando um erro ( all warnings being treated as errors ) na build, por isso ele n\u00e3o \u00e9 utilizado juntando tudo Primeiro \u00e9 preciso baixar esse script da BayLibre ou meu backup mais informa\u00e7\u00f5es sobre a FIP + compilados agora precisamos copiar os arquivos cp u-boot-vim3/build/scp_task/bl301.bin fip cp u-boot-vim3/build/board/khadas/kvim3/firmware/acs.bin fip cp u-boot-vim3/fip/g12b/bl2.bin fip cp u-boot-vim3/fip/g12b/bl30.bin fip cp u-boot-vim3/fip/g12b/bl31.bin fip cp u-boot-vim3/fip/g12b/ddr3_1d.fw fip cp u-boot-vim3/fip/g12b/ddr4_1d.fw fip cp u-boot-vim3/fip/g12b/ddr4_2d.fw fip cp u-boot-vim3/fip/g12b/diag_lpddr4.fw fip cp u-boot-vim3/fip/g12b/lpddr3_1d.fw fip cp u-boot-vim3/fip/g12b/lpddr4_1d.fw fip cp u-boot-vim3/fip/g12b/lpddr4_2d.fw fip cp u-boot-vim3/fip/g12b/piei.fw fip cp u-boot-vim3/fip/g12b/aml_ddr.fw fip cp u-boot-mainline/out/u-boot.bin fip/bl33.bin cp u-boot-vim3/fip/g12b/aml_encrypt_g12b fip As pastas ficaram organizadas assim: . \u251c\u2500\u2500 fip \u251c\u2500\u2500 toolchains \u251c\u2500\u2500 u-boot-mainline \u2514\u2500\u2500 u-boot-vim3 concatenando os arquivos bash blx_fix.sh bl30.bin zero_tmp bl30_zero.bin bl301.bin bl301_zero.bin bl30_new.bin bl30 bash blx_fix.sh bl2.bin zero_tmp bl2_zero.bin acs.bin bl21_zero.bin bl2_new.bin bl2 Encriptando -> mais informa\u00e7\u00f5es link ./aml_encrypt_g12b --bl30sig --input bl30_new.bin --output bl30_new.bin.g12a.enc --level v3 ./aml_encrypt_g12b --bl3sig --input bl30_new.bin.g12a.enc --output bl30_new.bin.enc --level v3 --type bl30 ./aml_encrypt_g12b --bl3sig --input bl31.bin --output bl31.img.enc --level v3 --type bl31 ./aml_encrypt_g12b --bl3sig --input bl33.bin --compress lz4 --output bl33.bin.enc --level v3 --type bl33 --compress lz4 ./aml_encrypt_g12b --bl2sig --input bl2_new.bin --output bl2.n.bin.sig ./aml_encrypt_g12b --bootmk --output u-boot-bin --bl2 bl2.n.bin.sig --bl30 bl30_new.bin.enc --bl31 bl31.img.enc --bl33 bl33.bin.enc --ddrfw1 ddr4_1d.fw --ddrfw2 ddr4_2d.fw --ddrfw3 ddr3_1d.fw --ddrfw4 piei.fw --ddrfw5 lpddr4_1d.fw --ddrfw6 lpddr4_2d.fw --ddrfw7 diag_lpddr4.fw --ddrfw8 aml_ddr.fw --ddrfw9 lpddr3_1d.fw --level v3 escrever no sd card $ DEV=/dev/your_sd_device $ dd if=fip/u-boot.bin.sd.bin of=$DEV conv=fsync,notrunc bs=512 skip=1 seek=1 $ dd if=fip/u-boot.bin.sd.bin of=$DEV conv=fsync,notrunc bs=1 count=444","title":"U-boot na VIM3"},{"location":"Bootloader/VIM3/u-boot/#u-boot-na-vim3","text":"U-boot logo baseado no tutorial do p\u0155oprio u-boot em readthedocs","title":"U-boot na VIM3"},{"location":"Bootloader/VIM3/u-boot/#main-line","text":"Baixar o u-boot mainline git clone https://github.com/u-boot/u-boot.git u-boot-mainline baixei o toolchain versao , para vers\u00f5es mais atuais checar em toolchain Precisa adicionar o path do arquivo descompactado ao $PATH do linux execute o seguinte comando dentro da pasta descompactada Buildando o u-boot 1 2 make khadas-vim3_defconfig O = out/ make CROSS_COMPILE = aarch64-none-elf- O = out/ O par\u00e2metro O define a pasta onde os arquivos gerados ser\u00e3o salvos.","title":"Main line"},{"location":"Bootloader/VIM3/u-boot/#uboot-modificado-vim3","text":"Baixar git clone https://github.com/khadas/u-boot.git -b khadas-vims-v2015.01 u-boot-vim3 baixei a toolchain linaro ou no meu backup backup outra toolchain linaro ou meu backup backup Precisa adicionar o path dos arquivos descompactados ao $PATH do linux Buildando o u-boot VIM3 1 2 make kvim3_defconfig make CROSS_COMPILE = aarch64-none-elf- utilizar o paramametro O acaba gerando um erro ( all warnings being treated as errors ) na build, por isso ele n\u00e3o \u00e9 utilizado juntando tudo Primeiro \u00e9 preciso baixar esse script da BayLibre ou meu backup mais informa\u00e7\u00f5es sobre a FIP + compilados agora precisamos copiar os arquivos cp u-boot-vim3/build/scp_task/bl301.bin fip cp u-boot-vim3/build/board/khadas/kvim3/firmware/acs.bin fip cp u-boot-vim3/fip/g12b/bl2.bin fip cp u-boot-vim3/fip/g12b/bl30.bin fip cp u-boot-vim3/fip/g12b/bl31.bin fip cp u-boot-vim3/fip/g12b/ddr3_1d.fw fip cp u-boot-vim3/fip/g12b/ddr4_1d.fw fip cp u-boot-vim3/fip/g12b/ddr4_2d.fw fip cp u-boot-vim3/fip/g12b/diag_lpddr4.fw fip cp u-boot-vim3/fip/g12b/lpddr3_1d.fw fip cp u-boot-vim3/fip/g12b/lpddr4_1d.fw fip cp u-boot-vim3/fip/g12b/lpddr4_2d.fw fip cp u-boot-vim3/fip/g12b/piei.fw fip cp u-boot-vim3/fip/g12b/aml_ddr.fw fip cp u-boot-mainline/out/u-boot.bin fip/bl33.bin cp u-boot-vim3/fip/g12b/aml_encrypt_g12b fip As pastas ficaram organizadas assim: . \u251c\u2500\u2500 fip \u251c\u2500\u2500 toolchains \u251c\u2500\u2500 u-boot-mainline \u2514\u2500\u2500 u-boot-vim3 concatenando os arquivos bash blx_fix.sh bl30.bin zero_tmp bl30_zero.bin bl301.bin bl301_zero.bin bl30_new.bin bl30 bash blx_fix.sh bl2.bin zero_tmp bl2_zero.bin acs.bin bl21_zero.bin bl2_new.bin bl2 Encriptando -> mais informa\u00e7\u00f5es link ./aml_encrypt_g12b --bl30sig --input bl30_new.bin --output bl30_new.bin.g12a.enc --level v3 ./aml_encrypt_g12b --bl3sig --input bl30_new.bin.g12a.enc --output bl30_new.bin.enc --level v3 --type bl30 ./aml_encrypt_g12b --bl3sig --input bl31.bin --output bl31.img.enc --level v3 --type bl31 ./aml_encrypt_g12b --bl3sig --input bl33.bin --compress lz4 --output bl33.bin.enc --level v3 --type bl33 --compress lz4 ./aml_encrypt_g12b --bl2sig --input bl2_new.bin --output bl2.n.bin.sig ./aml_encrypt_g12b --bootmk --output u-boot-bin --bl2 bl2.n.bin.sig --bl30 bl30_new.bin.enc --bl31 bl31.img.enc --bl33 bl33.bin.enc --ddrfw1 ddr4_1d.fw --ddrfw2 ddr4_2d.fw --ddrfw3 ddr3_1d.fw --ddrfw4 piei.fw --ddrfw5 lpddr4_1d.fw --ddrfw6 lpddr4_2d.fw --ddrfw7 diag_lpddr4.fw --ddrfw8 aml_ddr.fw --ddrfw9 lpddr3_1d.fw --level v3","title":"uboot modificado VIM3"},{"location":"Bootloader/VIM3/u-boot/#escrever-no-sd-card","text":"$ DEV=/dev/your_sd_device $ dd if=fip/u-boot.bin.sd.bin of=$DEV conv=fsync,notrunc bs=512 skip=1 seek=1 $ dd if=fip/u-boot.bin.sd.bin of=$DEV conv=fsync,notrunc bs=1 count=444","title":"escrever no sd card"},{"location":"Bootloader/qemu/U-boot_qemu/","text":"U-boot no QEMU Image by PublicDomainPictures from Pixabay Introdu\u00e7\u00e3o A fim de ter um ambiente de testes para aprender sobre o U-Boot, o mais recomendado \u00e9 criar um ambiente virtual. Para isso, eu escolhi o QEMU, que \u00e9 altamente configur\u00e1vel. Essa postagem tem como base a arquitetura aarch64 , devido sua larga utiliza\u00e7\u00e3o em sistemas embarcados. Baixando o U-Boot mainline Basta copiar e colar o c\u00f3digo abaixo: git clone https://source.denx.de/u-boot/u-boot.git Buildando o U-boot A seguir s\u00e3o definidos alguns passos para gerar o bin\u00e1rio do U-boot, que ser\u00e1 utilizado pelo QEMU. Instalando Depend\u00eancias Dependendo do sistema utilizado, alguns pacotes ser\u00e3o necess\u00e1rios para que o processo de build tenha sucesso. No meu ambiente ( ubuntu 22.04 ), foram necess\u00e1rio os seguintes pacotes: sudo apt install \\ flex \\ bison \\ gcc-aarch64-linux-gnu \\ Definindo a Arquitetura Para criar um sistema de build limpo, o par\u00e2metro O= foi utilizado. Dentro da pasta do U-Boot, cole o c\u00f3digo abaixo: make O=../out qemu_arm64_defconfig -j16 Se tudo ocorrer bem, a mensagem a seguir deve aparecer: Uma pasta out foi criada, adicionando todos os itens necess\u00e1rios para a build. Gerando o Bin\u00e1rio Dentro da pasta out , cole o c\u00f3digo abaixo: make CROSS_COMPILE=aarch64-linux-gnu- -j16 Se tudo ocorrer corretamente o arquivo u-boot.bin ser\u00e1 criado. Carregando o U-boot com QEMU Para utilizar o QEMU para arquiteturas ARM64 \u00e9 necess\u00e1rio instalar o pacote: sudo apt install qemu-system-arm Dentro da pasta out , execute o seguinte comando: qemu-system-aarch64 -M virt -nographic -cpu cortex-a57 -bios u-boot.bin onde o par\u00e2metro -bios \u00e9 o binario que acabou de ser criado pela nossa build. Ap\u00f3s executar o comando, o u-boot dever\u00e1 iniciar normalmente:","title":"U-boot no QEMU"},{"location":"Bootloader/qemu/U-boot_qemu/#u-boot-no-qemu","text":"Image by PublicDomainPictures from Pixabay","title":"U-boot no QEMU"},{"location":"Bootloader/qemu/U-boot_qemu/#introducao","text":"A fim de ter um ambiente de testes para aprender sobre o U-Boot, o mais recomendado \u00e9 criar um ambiente virtual. Para isso, eu escolhi o QEMU, que \u00e9 altamente configur\u00e1vel. Essa postagem tem como base a arquitetura aarch64 , devido sua larga utiliza\u00e7\u00e3o em sistemas embarcados.","title":"Introdu\u00e7\u00e3o"},{"location":"Bootloader/qemu/U-boot_qemu/#baixando-o-u-boot-mainline","text":"Basta copiar e colar o c\u00f3digo abaixo: git clone https://source.denx.de/u-boot/u-boot.git","title":"Baixando o U-Boot mainline"},{"location":"Bootloader/qemu/U-boot_qemu/#buildando-o-u-boot","text":"A seguir s\u00e3o definidos alguns passos para gerar o bin\u00e1rio do U-boot, que ser\u00e1 utilizado pelo QEMU.","title":"Buildando o U-boot"},{"location":"Bootloader/qemu/U-boot_qemu/#instalando-dependencias","text":"Dependendo do sistema utilizado, alguns pacotes ser\u00e3o necess\u00e1rios para que o processo de build tenha sucesso. No meu ambiente ( ubuntu 22.04 ), foram necess\u00e1rio os seguintes pacotes: sudo apt install \\ flex \\ bison \\ gcc-aarch64-linux-gnu \\","title":"Instalando Depend\u00eancias"},{"location":"Bootloader/qemu/U-boot_qemu/#definindo-a-arquitetura","text":"Para criar um sistema de build limpo, o par\u00e2metro O= foi utilizado. Dentro da pasta do U-Boot, cole o c\u00f3digo abaixo: make O=../out qemu_arm64_defconfig -j16 Se tudo ocorrer bem, a mensagem a seguir deve aparecer: Uma pasta out foi criada, adicionando todos os itens necess\u00e1rios para a build.","title":"Definindo a Arquitetura"},{"location":"Bootloader/qemu/U-boot_qemu/#gerando-o-binario","text":"Dentro da pasta out , cole o c\u00f3digo abaixo: make CROSS_COMPILE=aarch64-linux-gnu- -j16 Se tudo ocorrer corretamente o arquivo u-boot.bin ser\u00e1 criado.","title":"Gerando o Bin\u00e1rio"},{"location":"Bootloader/qemu/U-boot_qemu/#carregando-o-u-boot-com-qemu","text":"Para utilizar o QEMU para arquiteturas ARM64 \u00e9 necess\u00e1rio instalar o pacote: sudo apt install qemu-system-arm Dentro da pasta out , execute o seguinte comando: qemu-system-aarch64 -M virt -nographic -cpu cortex-a57 -bios u-boot.bin onde o par\u00e2metro -bios \u00e9 o binario que acabou de ser criado pela nossa build. Ap\u00f3s executar o comando, o u-boot dever\u00e1 iniciar normalmente:","title":"Carregando o U-boot com QEMU"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/","text":"Documenta\u00e7\u00e3o com MKDOCS Image by WikiImages from Pixabay Introdu\u00e7\u00e3o Essa postagem foi inspirado na live de python #189 . Se quiser mais informa\u00e7\u00f5es sobre MKDocs da uma olhada no v\u00eddeo e deixa o like. O MKDocs \u00e9 uma biblioteca focada em documenta\u00e7\u00e3o, desenvolvida em python. Ela possui v\u00e1rias funcionalidades e algumas delas ser\u00e3o mostradas abaixo. Para instalar: pip install mkdocs Ap\u00f3s a instala\u00e7\u00e3o basta digitar: mkdocs new TESTE Os arquivos necess\u00e1rios para iniciar a documenta\u00e7\u00e3o ser\u00e3o criados. Markdown B\u00e1sico Comandos dispon\u00edveis por padr\u00e3o na biblioteca. T\u00edtulo (H1) # Exemplo Subtitulo (H2) ## Exemplo Subsubtitulo (H3) ### Exemplo Negrito **Exemplo** Exemplo It\u00e1lico *Exemplo* Exemplo Cita\u00e7\u00e3o > Exemplo Exemplo Lista Ordenada 1. Exemplo 2. Exemplo 3. Exemplo Exemplo Exemplo Exemplo Lista N\u00e3o Ordenada - Exemplo - Exemplo - Exemplo Exemplo Exemplo Exemplo Linha de C\u00f3digo `C\u00f3digo` C\u00f3digo Link [Site do google](https://www.google.com.br) Site do google Tabela | Nome | Idade | | ---- | ----- | | Jo\u00e3o | 28 | | Pedro | 34 | Nome Idade Jo\u00e3o 28 Pedro 34 Markdown Estendido Para ter ainda mais funcionalidades, \u00e9 necess\u00e1rio instalar a biblioteca PyMdown Extensions : pip install pymdown-extensions Al\u00e9m disso, \u00e9 necess\u00e1rio adicionar quais extens\u00f5es ser\u00e3o usadas dentro do arquivo mkdocs.yml , por exemplo: markdown_extensions: - pymdownx.tasklist - pymdownx.emoji - pymdownx.mark - pymdownx.tilde Cada uma dessas extens\u00f5es ser\u00e3o mostradas a seguir. Lista de Tarefas pymdownx.tasklist - [ ] Checar. - [ ] checar. - [X] checado. Checar. checar. checado. Emoji Para mais emojis: emojipedia . Escolha um emoji e procure por Shortcodes . pymdownx.emoji :snake: :heart: :rocket: Tachado pymdownx.tilde ~~Exemplo~~ Exemplo Real\u00e7ado pymdownx.mark ==Exemplo== Exemplo Super Fences Dentro do pymdown-extensions existe uma funcionalidade que merece um t\u00f3pico a parte, chamado de superfences . Com ele, o MKDocs fica ainda mais poderoso. \u00c9 necess\u00e1rio informar para o MKDocs que o super fences ser\u00e1 utilizado, adicionando as linhas dentro do mkdocs.yml : markdown_extensions: # ... - pymdownx.superfences: custom_fences: - name: mermaid class: mermaid format: !!python/name:pymdownx.superfences.fence_div_format extra_javascript: - https://unpkg.com/mermaid@8.5.1/dist/mermaid.min.js Bloco de c\u00f3digo pymdownx.superfences ```{.py3 linenums=\"44\" title=\"teste.py\" hl_lines=\"1 3\"} def xpto(): \"\"\"Docstring\"\"\" return True ``` teste.py 44 45 46 def xpto (): \"\"\"Docstring\"\"\" return True F\u00f3rmulas pymdownx.arithmatex $$ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} $$ \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] The homomorphism $f$ is injective if and only if its kernel is only the singleton set $e_G$, because otherwise $\\exists a,b\\in G$ with $a\\neq b$ such that $f(a)=f(b)$. The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . Custom Fences \u00c9 poss\u00edvel incorporar outras bibliotecas dentro do MKDocs, por exemplo a Mermaid que \u00e9 uma biblioteca para gerar diagramas e gr\u00e1ficos. Para isso, \u00e9 necess\u00e1rio adicionar no mkdocs.yml - pymdownx.superfences: custom_fences: - name: mermaid class: mermaid format: !!python/name:pymdownx.superfences.fence_div_format extra_javascript: - https://unpkg.com/mermaid@8.5.1/dist/mermaid.min.js ```mermaid classDiagram Pessoa <|-- Eduardo class Pessoa{ +String nome +metodo(self):bool } ``` classDiagram Pessoa <|-- Jao class Pessoa{ +String nome +metodo(self):bool }","title":"Documenta\u00e7\u00e3o com MKDOCS"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#documentacao-com-mkdocs","text":"Image by WikiImages from Pixabay","title":"Documenta\u00e7\u00e3o com MKDOCS"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#introducao","text":"Essa postagem foi inspirado na live de python #189 . Se quiser mais informa\u00e7\u00f5es sobre MKDocs da uma olhada no v\u00eddeo e deixa o like. O MKDocs \u00e9 uma biblioteca focada em documenta\u00e7\u00e3o, desenvolvida em python. Ela possui v\u00e1rias funcionalidades e algumas delas ser\u00e3o mostradas abaixo. Para instalar: pip install mkdocs Ap\u00f3s a instala\u00e7\u00e3o basta digitar: mkdocs new TESTE Os arquivos necess\u00e1rios para iniciar a documenta\u00e7\u00e3o ser\u00e3o criados.","title":"Introdu\u00e7\u00e3o"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#markdown-basico","text":"Comandos dispon\u00edveis por padr\u00e3o na biblioteca.","title":"Markdown B\u00e1sico"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#titulo-h1","text":"# Exemplo","title":"T\u00edtulo (H1)"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#subtitulo-h2","text":"## Exemplo","title":"Subtitulo (H2)"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#subsubtitulo-h3","text":"### Exemplo","title":"Subsubtitulo (H3)"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#negrito","text":"**Exemplo** Exemplo","title":"Negrito"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#italico","text":"*Exemplo* Exemplo","title":"It\u00e1lico"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#citacao","text":"> Exemplo Exemplo","title":"Cita\u00e7\u00e3o"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#lista-ordenada","text":"1. Exemplo 2. Exemplo 3. Exemplo Exemplo Exemplo Exemplo","title":"Lista Ordenada"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#lista-nao-ordenada","text":"- Exemplo - Exemplo - Exemplo Exemplo Exemplo Exemplo","title":"Lista N\u00e3o Ordenada"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#linha-de-codigo","text":"`C\u00f3digo` C\u00f3digo","title":"Linha de C\u00f3digo"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#link","text":"[Site do google](https://www.google.com.br) Site do google","title":"Link"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#tabela","text":"| Nome | Idade | | ---- | ----- | | Jo\u00e3o | 28 | | Pedro | 34 | Nome Idade Jo\u00e3o 28 Pedro 34","title":"Tabela"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#markdown-estendido","text":"Para ter ainda mais funcionalidades, \u00e9 necess\u00e1rio instalar a biblioteca PyMdown Extensions : pip install pymdown-extensions Al\u00e9m disso, \u00e9 necess\u00e1rio adicionar quais extens\u00f5es ser\u00e3o usadas dentro do arquivo mkdocs.yml , por exemplo: markdown_extensions: - pymdownx.tasklist - pymdownx.emoji - pymdownx.mark - pymdownx.tilde Cada uma dessas extens\u00f5es ser\u00e3o mostradas a seguir.","title":"Markdown Estendido"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#lista-de-tarefas","text":"pymdownx.tasklist - [ ] Checar. - [ ] checar. - [X] checado. Checar. checar. checado.","title":"Lista de Tarefas"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#emoji","text":"Para mais emojis: emojipedia . Escolha um emoji e procure por Shortcodes . pymdownx.emoji :snake: :heart: :rocket:","title":"Emoji"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#tachado","text":"pymdownx.tilde ~~Exemplo~~ Exemplo","title":"Tachado"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#realcado","text":"pymdownx.mark ==Exemplo== Exemplo","title":"Real\u00e7ado"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#super-fences","text":"Dentro do pymdown-extensions existe uma funcionalidade que merece um t\u00f3pico a parte, chamado de superfences . Com ele, o MKDocs fica ainda mais poderoso. \u00c9 necess\u00e1rio informar para o MKDocs que o super fences ser\u00e1 utilizado, adicionando as linhas dentro do mkdocs.yml : markdown_extensions: # ... - pymdownx.superfences: custom_fences: - name: mermaid class: mermaid format: !!python/name:pymdownx.superfences.fence_div_format extra_javascript: - https://unpkg.com/mermaid@8.5.1/dist/mermaid.min.js","title":"Super Fences"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#bloco-de-codigo","text":"pymdownx.superfences ```{.py3 linenums=\"44\" title=\"teste.py\" hl_lines=\"1 3\"} def xpto(): \"\"\"Docstring\"\"\" return True ``` teste.py 44 45 46 def xpto (): \"\"\"Docstring\"\"\" return True","title":"Bloco de c\u00f3digo"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#formulas","text":"pymdownx.arithmatex $$ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} $$ \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] The homomorphism $f$ is injective if and only if its kernel is only the singleton set $e_G$, because otherwise $\\exists a,b\\in G$ with $a\\neq b$ such that $f(a)=f(b)$. The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) .","title":"F\u00f3rmulas"},{"location":"Documenta%C3%A7%C3%A3o/mkdocs/#custom-fences","text":"\u00c9 poss\u00edvel incorporar outras bibliotecas dentro do MKDocs, por exemplo a Mermaid que \u00e9 uma biblioteca para gerar diagramas e gr\u00e1ficos. Para isso, \u00e9 necess\u00e1rio adicionar no mkdocs.yml - pymdownx.superfences: custom_fences: - name: mermaid class: mermaid format: !!python/name:pymdownx.superfences.fence_div_format extra_javascript: - https://unpkg.com/mermaid@8.5.1/dist/mermaid.min.js ```mermaid classDiagram Pessoa <|-- Eduardo class Pessoa{ +String nome +metodo(self):bool } ``` classDiagram Pessoa <|-- Jao class Pessoa{ +String nome +metodo(self):bool }","title":"Custom Fences"},{"location":"Linguagens/Rust/Cap1/","text":"Introdu\u00e7\u00e3o Instalando o Rust no linux Escrevendo o Hello World! Usando cargo (gerenciador de pacotes e sistema de build) Instalando o Rust no linux Devemos baixar o rustup , que \u00e9 responsp\u00e1vel por baixar o rust e fazer a instala\u00e7\u00e3o curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh Algumas informa\u00e7\u00f5es devem aparecer Welcome to Rust! This will download and install the official compiler for the Rust programming language, and its package manager, Cargo. Rustup metadata and toolchains will be installed into the Rustup home directory, located at: /home/jao/Documents/Programs/rust/rustup/ This can be modified with the RUSTUP_HOME environment variable. The Cargo home directory located at: /home/jao/Documents/Programs/rust/cargo/ This can be modified with the CARGO_HOME environment variable. The cargo, rustc, rustup and other commands will be added to Cargo's bin directory , located at: /home/jao/.cargo/bin This path will then be added to your PATH environment variable by modifying the profile files located at: /home/jao/.profile /home/jao/.zshenv You can uninstall at any time with rustup self uninstall and these changes will be reverted. Current installation options: default host triple: x86_64-unknown-linux-gnu default toolchain: stable (default) profile: default modify PATH variable: yes 1) Proceed with installation (default) 2) Customize installation 3) Cancel installation Basta digitar 1 e a instala\u00e7\u00e3o ir\u00e1 come\u00e7ar. Se tudo occorrer bem, a seguinte mensagem deve aparecer Rust is installed now. Great! To get started you may need to restart your current shell. This would reload your PATH environment variable to include Cargo's bin directory (/home/jao/Documents/Programs/rust/cargo//bin). To configure your current shell, run: source /home/jao/Documents/Programs/rust/cargo//env Alguns comandos \u00fateis rustup update rustup self uninstall rustc --version rustup doc Escrevendo o Hello World! Crie um arquivo chamado main.rs e adicione o conte\u00fado main.rs fn main () { println! ( \"Hello World!\" ); } Para compilar e executar, basta digitar no terminal rustc main.rc ./main O resultado ser\u00e1 o texto Hello World! Alguns comandos \u00fateis rustfmt (para formatar o c\u00f3digo) Usando cargo (gerenciador de pacotes e sistema de build) Para criar um projeto utilizando o cargo , basta usar o comando cargo new hello_cargo Um arquivo main.rs ser\u00e1 criado dentro da pasta hello_cargo/src/ . Para compilar o c\u00f3digo, basta digitar cargo build dentro da pasta hello_cargo, a pasta target/ ser\u00e1 criada e o execut\u00e1vel est\u00e1 em hello_cargo/target/debug , chamado de hello_cargo Comandos \u00fateis cargo run (para executar o programa) cargo check (para fazer as checagens no c\u00f3digo, sem compilar) cargo build --release (para fazer uma build de release, por padr\u00e3o a build \u00e9 de debug).","title":"Introdu\u00e7\u00e3o"},{"location":"Linguagens/Rust/Cap1/#introducao","text":"Instalando o Rust no linux Escrevendo o Hello World! Usando cargo (gerenciador de pacotes e sistema de build)","title":"Introdu\u00e7\u00e3o"},{"location":"Linguagens/Rust/Cap1/#instalando-o-rust-no-linux","text":"Devemos baixar o rustup , que \u00e9 responsp\u00e1vel por baixar o rust e fazer a instala\u00e7\u00e3o curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh Algumas informa\u00e7\u00f5es devem aparecer Welcome to Rust! This will download and install the official compiler for the Rust programming language, and its package manager, Cargo. Rustup metadata and toolchains will be installed into the Rustup home directory, located at: /home/jao/Documents/Programs/rust/rustup/ This can be modified with the RUSTUP_HOME environment variable. The Cargo home directory located at: /home/jao/Documents/Programs/rust/cargo/ This can be modified with the CARGO_HOME environment variable. The cargo, rustc, rustup and other commands will be added to Cargo's bin directory , located at: /home/jao/.cargo/bin This path will then be added to your PATH environment variable by modifying the profile files located at: /home/jao/.profile /home/jao/.zshenv You can uninstall at any time with rustup self uninstall and these changes will be reverted. Current installation options: default host triple: x86_64-unknown-linux-gnu default toolchain: stable (default) profile: default modify PATH variable: yes 1) Proceed with installation (default) 2) Customize installation 3) Cancel installation Basta digitar 1 e a instala\u00e7\u00e3o ir\u00e1 come\u00e7ar. Se tudo occorrer bem, a seguinte mensagem deve aparecer Rust is installed now. Great! To get started you may need to restart your current shell. This would reload your PATH environment variable to include Cargo's bin directory (/home/jao/Documents/Programs/rust/cargo//bin). To configure your current shell, run: source /home/jao/Documents/Programs/rust/cargo//env","title":"Instalando o Rust no linux"},{"location":"Linguagens/Rust/Cap1/#alguns-comandos-uteis","text":"rustup update rustup self uninstall rustc --version rustup doc","title":"Alguns comandos \u00fateis"},{"location":"Linguagens/Rust/Cap1/#escrevendo-o-hello-world","text":"Crie um arquivo chamado main.rs e adicione o conte\u00fado main.rs fn main () { println! ( \"Hello World!\" ); } Para compilar e executar, basta digitar no terminal rustc main.rc ./main O resultado ser\u00e1 o texto Hello World!","title":"Escrevendo o Hello World!"},{"location":"Linguagens/Rust/Cap1/#alguns-comandos-uteis_1","text":"rustfmt (para formatar o c\u00f3digo)","title":"Alguns comandos \u00fateis"},{"location":"Linguagens/Rust/Cap1/#usando-cargo-gerenciador-de-pacotes-e-sistema-de-build","text":"Para criar um projeto utilizando o cargo , basta usar o comando cargo new hello_cargo Um arquivo main.rs ser\u00e1 criado dentro da pasta hello_cargo/src/ . Para compilar o c\u00f3digo, basta digitar cargo build dentro da pasta hello_cargo, a pasta target/ ser\u00e1 criada e o execut\u00e1vel est\u00e1 em hello_cargo/target/debug , chamado de hello_cargo","title":"Usando cargo (gerenciador de pacotes e sistema de build)"},{"location":"Linguagens/Rust/Cap1/#comandos-uteis","text":"cargo run (para executar o programa) cargo check (para fazer as checagens no c\u00f3digo, sem compilar) cargo build --release (para fazer uma build de release, por padr\u00e3o a build \u00e9 de debug).","title":"Comandos \u00fateis"},{"location":"RTOS/zephyr/zephyr/","text":"Zephyr + Esp32 + Blinky = \u2764\ufe0f Image by methodshop from Pixabay Introdu\u00e7\u00e3o Recentemente voltei a pesquisar sobre Internet of Things (IoT) e durante uma conversas no trabalho fiquei sabendo do Zephyr. Por sorte, um Webnar da Embarcados aconteceu e pude me interar mais sobre essa plataforma. S\u00f3 tenho uma palavra para definir: Sensacional \ud83e\udd2f Instalando depend\u00eancias Estou usando Ubuntu 22.04 . sudo apt install --no-install-recommends git cmake ninja-build gperf \\ ccache dfu-util device-tree-compiler wget \\ python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file \\ make gcc gcc-multilib g++-multilib libsdl2-dev O Zephyr usa o python para gerenciar os pacotes, algumas depend\u00eancias tamb\u00e9m s\u00e3o necess\u00e1rias pip3 install west Ap\u00f3s isso, \u00e9 necess\u00e1rio definir o local onde os arquivos ser\u00e3o salvos. No exemplo vou usar o caminho /home/jao/Documents/Workspace/IoT west init /home/jao/Documents/Workspace/IoT/PASTA_DO_ZEPHYR Alguns arquivos ser\u00e3o baixados do reposit\u00f3rio . Em seguida: PS: Demora... cd /home/jao/Documents/Workspace/IoT/PASTA_DO_ZEPHYR west update Depois de terminar a atualiza\u00e7\u00e3o, \u00e9 necess\u00e1rio exportar algumas vari\u00e1veis de ambiente: west zephyr-export e ent\u00e3o instalar as dep\u00eancencias restantes do python: pip3 install -r /home/jao/Documents/Workspace/IoT/PASTA_DO_ZEPHYR/zephyr/scripts/requirements.txt Baixando a toolchain Como vamos utilizar o Esp32, a toolchain pode ser baixada aqui . No meu caso estou usando a plataforma linux-amd64 Ap\u00f3s baixar a toolchain correto, extraia e adicione o caminho da pasta a vari\u00e1vel de ambiente ESPRESSIF_TOOLCHAIN_PATH export ESPRESSIF_TOOLCHAIN_PATH=/home/jao/Documents/Workspace/IoT/xtensa-esp32-elf/xtensa-esp32-elf/ \u00c9 necess\u00e1rio adicionar outra vari\u00e1vel: export ZEPHYR_TOOLCHAIN_VARIANT=\"espressif\" Finalmente, podemos baixar os pacotes referentes ao Esp32 do Zephyr: PS: O camando deve ser dado dentro da pasta do Zephyr, no caso: /home/jao/Documents/Workspace/IoT/PASTA_DO_ZEPHYR west espressif update Ap\u00f3s esse passo, o ambiente de configura\u00e7\u00e3o para o Esp32 estar\u00e1 finalizado. Exemplo Blinky Na vers\u00e3o atual do Zephyr 3.0.0 , \u00e9 necess\u00e1rio adicionar um m\u00f3dulo no device driver para que o led built-in sej\u00e1 reconhecido. Para isso, \u00e9 necess\u00e1rio criar um arquivo dentro do exemplo do Blincky do pr\u00f3prio Zephyr touch /home/jao/Documents/Workspace/IoT/PASTA_DO_ZEPHYR/zephyr/samples/basic/blinky/esp32.overlay o arquivo deve conter o seguinte conte\u00fado: / { aliases { led0 = &led0; }; leds { compatible = \"gpio-leds\"; led0: led_0 { gpios = <&gpio0 2 GPIO_ACTIVE_HIGH>; label = \"LED 0\"; }; }; }; Na linha gpios = <&gpio0 2 GPIO_ACTIVE_HIGH>; , o n\u00famero 2 \u00e9 referente ao gpio associado ao led built-in . Agora \u00e9 s\u00f3 compilar: PS: dentro da pasta: /home/jao/Documents/Workspace/IoT/PASTA_DO_ZEPHYR/ west build -p auto -b esp32 zephyr/samples/basic/blinky Muitas vezes o arquivo CMakeCache.txt, precisa ser deletado. Ele fica localizado em : /home/jao/Documents/Workspace/IoT/PASTA_DO_ZEPHYR/build/ Se tudo ocorrer bem, a seguinte mensagem deve aparecer: [103/103] Linking C executable zephyr/zephyr.elf Memory region Used Size Region Size %age Used mcuboot_hdr: 32 B 32 B 100.00% metadata: 28 B 32 B 87.50% ROM: 31172 B 4194240 B 0.74% iram0_0_seg: 13004 B 128 KB 9.92% irom0_0_seg: 13692 B 3342304 B 0.41% dram0_0_seg: 1240 B 180736 B 0.69% dram0_1_seg: 53 KB 110032 B 49.32% drom0_0_seg: 3826 B 4194240 B 0.09% rtc_iram_seg: 0 GB 8 KB 0.00% rtc_slow_seg: 0 GB 4 KB 0.00% IDT_LIST: 0 GB 8 KB 0.00% esptool.py v3.3-dev Creating esp32 image... Merged 6 ELF sections Successfully created esp32 image. Para flashar no esp32, pasta digitar o seguinte comando: west flash O resultado deve ser algo semelhante: Flash will be erased from 0x00010000 to 0x00033fff... Flash params set to 0x0220 Wrote 32768 bytes at 0x00001000 in 0.7 seconds (390.4 kbit/s)... Hash of data verified. Wrote 16384 bytes at 0x00008000 in 0.3 seconds (515.8 kbit/s)... Hash of data verified. Wrote 147456 bytes at 0x00010000 in 2.0 seconds (594.7 kbit/s)... Hash of data verified. Leaving... Hard resetting via RTS pin... Se o seguinte erro acontecer: /dev/ttyS0 failed to connect: Failed to connect to Espressif device: No serial data received. For troubleshooting steps visit: https://docs.espressif.com/projects/esptool/en/latest/troubleshooting.html A fatal error occurred: Could not connect to an Espressif device on any of the 2 available serial ports. Talvez seja necess\u00e1rio ficar segurando o bot\u00e3o boot do Esp32. \u00c9 isso, at\u00e9 a pr\u00f3xima.","title":"Zephyr + Esp32 + Blinky = \u2764\ufe0f"},{"location":"RTOS/zephyr/zephyr/#zephyr-esp32-blinky","text":"Image by methodshop from Pixabay","title":"Zephyr + Esp32 + Blinky = \u2764\ufe0f"},{"location":"RTOS/zephyr/zephyr/#introducao","text":"Recentemente voltei a pesquisar sobre Internet of Things (IoT) e durante uma conversas no trabalho fiquei sabendo do Zephyr. Por sorte, um Webnar da Embarcados aconteceu e pude me interar mais sobre essa plataforma. S\u00f3 tenho uma palavra para definir: Sensacional \ud83e\udd2f","title":"Introdu\u00e7\u00e3o"},{"location":"RTOS/zephyr/zephyr/#instalando-dependencias","text":"Estou usando Ubuntu 22.04 . sudo apt install --no-install-recommends git cmake ninja-build gperf \\ ccache dfu-util device-tree-compiler wget \\ python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file \\ make gcc gcc-multilib g++-multilib libsdl2-dev O Zephyr usa o python para gerenciar os pacotes, algumas depend\u00eancias tamb\u00e9m s\u00e3o necess\u00e1rias pip3 install west Ap\u00f3s isso, \u00e9 necess\u00e1rio definir o local onde os arquivos ser\u00e3o salvos. No exemplo vou usar o caminho /home/jao/Documents/Workspace/IoT west init /home/jao/Documents/Workspace/IoT/PASTA_DO_ZEPHYR Alguns arquivos ser\u00e3o baixados do reposit\u00f3rio . Em seguida: PS: Demora... cd /home/jao/Documents/Workspace/IoT/PASTA_DO_ZEPHYR west update Depois de terminar a atualiza\u00e7\u00e3o, \u00e9 necess\u00e1rio exportar algumas vari\u00e1veis de ambiente: west zephyr-export e ent\u00e3o instalar as dep\u00eancencias restantes do python: pip3 install -r /home/jao/Documents/Workspace/IoT/PASTA_DO_ZEPHYR/zephyr/scripts/requirements.txt","title":"Instalando depend\u00eancias"},{"location":"RTOS/zephyr/zephyr/#baixando-a-toolchain","text":"Como vamos utilizar o Esp32, a toolchain pode ser baixada aqui . No meu caso estou usando a plataforma linux-amd64 Ap\u00f3s baixar a toolchain correto, extraia e adicione o caminho da pasta a vari\u00e1vel de ambiente ESPRESSIF_TOOLCHAIN_PATH export ESPRESSIF_TOOLCHAIN_PATH=/home/jao/Documents/Workspace/IoT/xtensa-esp32-elf/xtensa-esp32-elf/ \u00c9 necess\u00e1rio adicionar outra vari\u00e1vel: export ZEPHYR_TOOLCHAIN_VARIANT=\"espressif\" Finalmente, podemos baixar os pacotes referentes ao Esp32 do Zephyr: PS: O camando deve ser dado dentro da pasta do Zephyr, no caso: /home/jao/Documents/Workspace/IoT/PASTA_DO_ZEPHYR west espressif update Ap\u00f3s esse passo, o ambiente de configura\u00e7\u00e3o para o Esp32 estar\u00e1 finalizado.","title":"Baixando a toolchain"},{"location":"RTOS/zephyr/zephyr/#exemplo-blinky","text":"Na vers\u00e3o atual do Zephyr 3.0.0 , \u00e9 necess\u00e1rio adicionar um m\u00f3dulo no device driver para que o led built-in sej\u00e1 reconhecido. Para isso, \u00e9 necess\u00e1rio criar um arquivo dentro do exemplo do Blincky do pr\u00f3prio Zephyr touch /home/jao/Documents/Workspace/IoT/PASTA_DO_ZEPHYR/zephyr/samples/basic/blinky/esp32.overlay o arquivo deve conter o seguinte conte\u00fado: / { aliases { led0 = &led0; }; leds { compatible = \"gpio-leds\"; led0: led_0 { gpios = <&gpio0 2 GPIO_ACTIVE_HIGH>; label = \"LED 0\"; }; }; }; Na linha gpios = <&gpio0 2 GPIO_ACTIVE_HIGH>; , o n\u00famero 2 \u00e9 referente ao gpio associado ao led built-in . Agora \u00e9 s\u00f3 compilar: PS: dentro da pasta: /home/jao/Documents/Workspace/IoT/PASTA_DO_ZEPHYR/ west build -p auto -b esp32 zephyr/samples/basic/blinky Muitas vezes o arquivo CMakeCache.txt, precisa ser deletado. Ele fica localizado em : /home/jao/Documents/Workspace/IoT/PASTA_DO_ZEPHYR/build/ Se tudo ocorrer bem, a seguinte mensagem deve aparecer: [103/103] Linking C executable zephyr/zephyr.elf Memory region Used Size Region Size %age Used mcuboot_hdr: 32 B 32 B 100.00% metadata: 28 B 32 B 87.50% ROM: 31172 B 4194240 B 0.74% iram0_0_seg: 13004 B 128 KB 9.92% irom0_0_seg: 13692 B 3342304 B 0.41% dram0_0_seg: 1240 B 180736 B 0.69% dram0_1_seg: 53 KB 110032 B 49.32% drom0_0_seg: 3826 B 4194240 B 0.09% rtc_iram_seg: 0 GB 8 KB 0.00% rtc_slow_seg: 0 GB 4 KB 0.00% IDT_LIST: 0 GB 8 KB 0.00% esptool.py v3.3-dev Creating esp32 image... Merged 6 ELF sections Successfully created esp32 image. Para flashar no esp32, pasta digitar o seguinte comando: west flash O resultado deve ser algo semelhante: Flash will be erased from 0x00010000 to 0x00033fff... Flash params set to 0x0220 Wrote 32768 bytes at 0x00001000 in 0.7 seconds (390.4 kbit/s)... Hash of data verified. Wrote 16384 bytes at 0x00008000 in 0.3 seconds (515.8 kbit/s)... Hash of data verified. Wrote 147456 bytes at 0x00010000 in 2.0 seconds (594.7 kbit/s)... Hash of data verified. Leaving... Hard resetting via RTS pin... Se o seguinte erro acontecer: /dev/ttyS0 failed to connect: Failed to connect to Espressif device: No serial data received. For troubleshooting steps visit: https://docs.espressif.com/projects/esptool/en/latest/troubleshooting.html A fatal error occurred: Could not connect to an Espressif device on any of the 2 available serial ports. Talvez seja necess\u00e1rio ficar segurando o bot\u00e3o boot do Esp32. \u00c9 isso, at\u00e9 a pr\u00f3xima.","title":"Exemplo Blinky"}]}